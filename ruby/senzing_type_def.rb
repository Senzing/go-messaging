# Code generated by jtd-codegen for Ruby v0.1.1

require 'json'
require 'time'

module SenzingTypeDef

  class Senzingapi
    attr_accessor :value

    def self.from_json_data(data)
      out = Senzingapi.new
      out.value = SenzingTypeDef.from_json_data(Object, data)
      out
    end

    def to_json_data
      SenzingTypeDef.to_json_data(value)
    end
  end

  class Details
    attr_accessor :value

    def self.from_json_data(data)
      out = Details.new
      out.value = SenzingTypeDef.from_json_data(Object, data)
      out
    end

    def to_json_data
      SenzingTypeDef.to_json_data(value)
    end
  end

  class Duration
    attr_accessor :value

    def self.from_json_data(data)
      out = Duration.new
      out.value = SenzingTypeDef.from_json_data(Integer, data)
      out
    end

    def to_json_data
      SenzingTypeDef.to_json_data(value)
    end
  end

  class Errors
    attr_accessor :value

    def self.from_json_data(data)
      out = Errors.new
      out.value = SenzingTypeDef.from_json_data(Object, data)
      out
    end

    def to_json_data
      SenzingTypeDef.to_json_data(value)
    end
  end

  class ID
    attr_accessor :value

    def self.from_json_data(data)
      out = ID.new
      out.value = SenzingTypeDef.from_json_data(String, data)
      out
    end

    def to_json_data
      SenzingTypeDef.to_json_data(value)
    end
  end

  class Level
    attr_accessor :value

    def self.from_json_data(data)
      out = Level.new
      out.value = SenzingTypeDef.from_json_data(String, data)
      out
    end

    def to_json_data
      SenzingTypeDef.to_json_data(value)
    end
  end

  class Location
    attr_accessor :value

    def self.from_json_data(data)
      out = Location.new
      out.value = SenzingTypeDef.from_json_data(String, data)
      out
    end

    def to_json_data
      SenzingTypeDef.to_json_data(value)
    end
  end

  class Status
    attr_accessor :value

    def self.from_json_data(data)
      out = Status.new
      out.value = SenzingTypeDef.from_json_data(String, data)
      out
    end

    def to_json_data
      SenzingTypeDef.to_json_data(value)
    end
  end

  class Text
    attr_accessor :value

    def self.from_json_data(data)
      out = Text.new
      out.value = SenzingTypeDef.from_json_data(Object, data)
      out
    end

    def to_json_data
      SenzingTypeDef.to_json_data(value)
    end
  end

  class Time
    attr_accessor :value

    def self.from_json_data(data)
      out = Time.new
      out.value = SenzingTypeDef.from_json_data(String, data)
      out
    end

    def to_json_data
      SenzingTypeDef.to_json_data(value)
    end
  end

  private

  def self.from_json_data(type, data)
    if data.nil? || [Object, TrueClass, Integer, Float, String].include?(type)
      data
    elsif type == DateTime
      DateTime.rfc3339(data)
    elsif type.is_a?(Array)
      data.map { |elem| from_json_data(type.first, elem) }
    elsif type.is_a?(Hash)
      data.transform_values { |elem| from_json_data(type.values.first, elem) }
    else
      type.from_json_data(data)
    end
  end

  def self.to_json_data(data)
    if data.nil? || [TrueClass, FalseClass, Integer, Float, String].include?(data.class)
      data
    elsif data.is_a?(DateTime)
      data.rfc3339
    elsif data.is_a?(Array)
      data.map { |elem| to_json_data(elem) }
    elsif data.is_a?(Hash)
      data.transform_values { |elem| to_json_data(elem) }
    else
      data.to_json_data
    end
  end
end
