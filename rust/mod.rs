// Code generated by jtd-codegen for Rust v0.2.1

use serde::{Deserialize, Serialize};
use serde_json::Value;

#[derive(Serialize, Deserialize)]
pub struct SenzingMessage {
    #[serde(rename = "details")]
    pub details: Details,

    #[serde(rename = "duration")]
    pub duration: i32,

    #[serde(rename = "errors")]
    pub errors: Errors,

    /// The unique identification of the message.
    #[serde(rename = "id")]
    pub id: String,

    /// Log level.  Possible values: TRACE, DEBUG, INFO, WARN, ERROR, FATAL,
    /// or PANIC.
    #[serde(rename = "level")]
    pub level: String,

    /// Location in the code.
    #[serde(rename = "location")]
    pub location: String,

    #[serde(rename = "status")]
    pub status: String,

    #[serde(rename = "text")]
    pub text: Option<Value>,

    /// Time message was generated in RFC3339 format.
    #[serde(rename = "time")]
    pub time: String,
}

#[derive(Serialize, Deserialize)]
pub struct Detail {
    #[serde(rename = "key")]
    pub key: String,

    #[serde(rename = "position")]
    pub position: i32,

    #[serde(rename = "value")]
    pub value: Option<Value>,

    #[serde(rename = "valueAsString")]
    pub valueAsString: String,
}

pub type Details = Vec<Detail>;

pub type Error = String;

pub type Errors = Vec<Error>;
